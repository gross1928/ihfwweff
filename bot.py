"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–µ–∫—Å—Ç–∏–Ω–≥–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import config
from characters import get_character, get_characters_keyboard_data, CHARACTERS
from ai_provider import get_ai_provider

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
ai_provider = get_ai_provider()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class ChatStates(StatesGroup):
    choosing_character = State()
    chatting = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–π —á–∞—Ç–æ–≤
user_sessions = {}


def get_character_selection_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    buttons = []
    
    for char_data in get_characters_keyboard_data():
        buttons.append([
            InlineKeyboardButton(
                text=f"{char_data['emoji']} {char_data['name']}",
                callback_data=f"char_{char_data['id']}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_chat_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è —á–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="change_char")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="char_info")]
    ])


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "character": None,
            "history": []
        }
    
    welcome_text = (
        "üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecretChat!</b> üî•\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ AI –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –Ω–∞ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (18+)\n"
        "‚Ä¢ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã\n"
        "‚Ä¢ –£–≤–∞–∂–∞–π –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–ª—É—á–∞–π —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_character_selection_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ChatStates.choosing_character)


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    await message.answer(
        "‚öôÔ∏è <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>",
        reply_markup=get_chat_menu_keyboard(),
        parse_mode="HTML"
    )


@router.message(Command("change"))
async def cmd_change_character(message: Message, state: FSMContext):
    """–°–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=get_character_selection_keyboard()
    )
    await state.set_state(ChatStates.choosing_character)


@router.callback_query(F.data.startswith("char_"))
async def select_character(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    user_id = callback.from_user.id
    character_id = callback.data.replace("char_", "")
    
    character = get_character(character_id)
    if not character:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    user_sessions[user_id] = {
        "character_id": character_id,
        "character": character,
        "history": []
    }
    
    await state.set_state(ChatStates.chatting)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    greeting_text = (
        f"üí¨ <b>–ù–∞—á–∞—Ç —á–∞—Ç —Å: {character['name']}</b>\n\n"
        f"{character['greeting']}\n\n"
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º</i>"
    )
    
    await callback.message.edit_text(
        greeting_text,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "change_char")
async def callback_change_character(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ callback"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=get_character_selection_keyboard()
    )
    await state.set_state(ChatStates.choosing_character)
    await callback.answer()


@router.callback_query(F.data == "clear_history")
async def callback_clear_history(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    user_id = callback.from_user.id
    
    if user_id in user_sessions:
        user_sessions[user_id]["history"] = []
    
    await callback.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)


@router.callback_query(F.data == "char_info")
async def callback_character_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
    user_id = callback.from_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].get("character"):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
        return
    
    character = user_sessions[user_id]["character"]
    
    info_text = (
        f"{character['emoji']} <b>{character['name']}</b>\n\n"
        f"{character['description']}\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(user_sessions[user_id]['history'])}"
    )
    
    await callback.message.answer(info_text, parse_mode="HTML")
    await callback.answer()


@router.message(ChatStates.chatting)
async def handle_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if user_id not in user_sessions or not user_sessions[user_id].get("character"):
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_character_selection_keyboard()
        )
        return
    
    user_text = message.text
    session = user_sessions[user_id]
    character = session["character"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await ai_provider.generate_response(
            system_prompt=character["system_prompt"],
            conversation_history=session["history"],
            user_message=user_text
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        session["history"].append({"role": "user", "content": user_text})
        session["history"].append({"role": "assistant", "content": response})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(session["history"]) > config.MAX_HISTORY_LENGTH * 2:
            session["history"] = session["history"][-config.MAX_HISTORY_LENGTH * 2:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )


@router.message(ChatStates.choosing_character)
async def handle_message_without_character(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω"""
    await message.answer(
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=get_character_selection_keyboard()
    )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    dp.include_router(router)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üîß AI Provider: OpenRouter")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {config.MODEL_NAME}")
    logger.info(f"üìù –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(CHARACTERS)}")
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

